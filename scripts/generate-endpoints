#!/usr/bin/env ruby

EndpointInfo = Struct.new(:name, :param_sig)

endpoints = []
ARGF.each_line do |line|
   case line
   when /^val +endpoint_(\S+).*checker\s+\*\s+(.*?)\s+->/ then endpoints << EndpointInfo.new( $1, $2)
   when /^val +endpoint_/ then raise "#{ARGF.filename}:#{ARGF.lineno}: Unrecognised endpoint decl #{line}"
   end
end

class String
  def camelize
    split(/_/).map(&:capitalize).join
  end
end

puts <<EOF
(* GENERATED BY generate-endpoints SCRIPT, DO NOT EDIT BY HAND *)

open CheckerTypes
open Checker

EOF

puts "type lazy_function_id = Ligo.int"
puts
endpoints.each.with_index do |e, n|
  puts "let[@inline] lazy_id_#{e.name} = Ligo.int_from_literal \"#{n}\""
end
puts

puts "type lazy_function = checker * checker_raw_params -> LigoOp.operation list * checker"
puts
puts "let checkerParamsToLazyFunctionId (p: checker_params) : lazy_function_id * checker_raw_params =
  match p with
"
# Need to rebind the constructor arg to work around linearity of tickets
endpoints.each do |e|
  puts "   | #{e.name.camelize} a -> (lazy_id_#{e.name}, Raw#{e.name.camelize} (deticketify_#{e.name} a))"
end

# Generate wrappers for endpoint functions
endpoints.each do |endpoint|
  puts "
let lazy_fun_#{endpoint.name} (checker, params: checker * checker_raw_params): LigoOp.operation list * checker =
  match params with
    | Raw#{endpoint.name.camelize} a -> endpoint_#{endpoint.name} (checker, a)
"
  (endpoints - [endpoint]).each do |other|
  puts "    | Raw#{other.name.camelize} _ -> (failwith \"unexpected params\": LigoOp.operation list * checker)"
  end
end
puts

puts "(* BEGIN_OCAML *)"
puts "let lookUpLazyFunction (fnId : lazy_function_id) : lazy_function ="
endpoints.each.with_index do |e, n|
  puts "  if fnId = lazy_id_#{e.name} then lazy_fun_#{e.name} else"
end
puts "  failwith \"unexpected lazyFunctionId\""
puts "(* END_OCAML *)"
